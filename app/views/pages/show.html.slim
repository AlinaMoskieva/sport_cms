.row
  .medium-7.columns
    h2 align="center"
     = page.title
  .medium-7.columns
    p
      = page.body.html_safe
    .left(align="left")
      span
        i.fi-bookmark
          = "Theme:"
          = link_to(page.get_category.category, pages_path(category_id: page.get_category.id))
    .rigth(align="right")
      span
        i.fi-torsos-all-female
          = "Viewed #{page.visitors} times"

    br
    .medium-9.medium-centered.columns
      - if policy(page).update?
        = (link_to "Edit page", edit_page_path(page), class: "small secondary button")
        '
      - if policy(page).destroy?
        = link_to("Delete",page, method: :delete, data: { confirm: 'Are you sure?' }, class: "small secondary button")
      '
      = link_to "sub", new_users_category_path(category_id: page.get_category.id), class: "small secondary button"
      '
      = link_to("Back", :back, class: "small secondary button")
  .medium-2.columns
   br
  .medium-3.columns data-sticky-container=""
    = render "right_menu"
  .row
   .medium-7.columns
     p
       h4 Comments
       = paginate comments
       hr/
       -comments.each do |comment|
         span
           i.fi-torso
             = comment.comment_author
         br
         span
           i.fi-comment
             br
             - if policy(comment).update?
               = best_in_place comment, :body,
                 path: edit_comment_path(comment),
                 display_with: lambda { |v| v.html_safe },
                 as: :textarea,
                 ok_button: "Save",
                 ok_button_class: "tiny secondary button",
                 cancel_button: "Cancel",
                 cancel_button_class: "tiny alert button"
             - else
               = comment.body
           br
           = comment.date
         .right align="right "
           - if policy(comment).destroy?
             span
               i.fi-trash
                 = link_to("Delete",comment, method: :delete, class: 'btn btn-danger', data: { confirm: 'Are you sure?' })
         hr/
       p
        strong Add a comment
        - policy = CommentPolicy.new(current_user, page)
        - if policy.create?
          = form_for([page, Comment.new(page_id: page.id)]) do |f|
            p
              strong Commenter:
              = current_user.email
            p
              strong Comment
            br
            = f.cktext_area :body, :cols => 20,:ckeditor => {:uiColor => '#67b1d5', :height => 200}, required: true
            p
            = f.button :submit , class:"secondary small button"
        - else
          p
            .panel(class="callout")
              h6="You should sign in for have ability to add comments"

