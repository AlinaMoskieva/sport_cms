.row
  .medium-7.columns
    h2 align="center"
     = page.title
  .medium-7.columns
    p
      = page.body.html_safe
    .left(align="left")
      span
        i.fi-price-tag
          = "Tags:  "
          = link_to(page.get_category.category, pages_path(category_id: page.get_category.id))
    .rigth(align="right")
      span
        i.fi-torsos-all-female
          = "Viewed #{page.visitors} times"
    br
    .medium-10.medium-centered.columns
      - policy = PagePolicy.new(current_user, page)
      - if policy.update?
        = (link_to "Edit page", edit_page_path(page), class: "small secondary button")
        '
      - if policy.destroy?
        = link_to("Delete",page, method: :delete, data: { confirm: 'Are you sure?' }, class: "small secondary button")
      '
      - sub_policy = UserPolicy.new(current_user, page)
      - if sub_policy.create_subscription?

        = link_to "Subscribe", new_users_category_path(category_id: page.get_category.id), class: "small secondary button"
        '
        = link_to("Back", :back, class: "small secondary button")
      - else
        .back_button(align="right")
          = link_to("Back", :back, class: "small radius expanded secondary  button")
  .medium-2.columns
   br
  .medium-3.columns data-sticky-container=""
    = render "right_menu"
  .row
   .medium-7.columns
     p
       h4 Comments
       = paginate comments
       hr/
       -comments.each do |comment|
         .row
           .medium-1.columns
             span
              i.fi-torso
           .medium-11.columns
              ="Commenter: #{comment.author}"
         .row
           .medium-1.columns
             span
               i.fi-comment
           .medium-11.columns
              = comment.body.html_safe
         .row
           .medium-1.columns
             span
               i.fi-clock
           .medium-6.columns
             = comment.date
           .medium-2.columns
             - policy = CommentPolicy.new(current_user, comment)
             - if policy.update?
             span
               i.fi-pencil
                 = link_to("Edit", edit_comment_path(comment))
           .medium-2.columns
              - if policy.destroy?
                span
                  i.fi-trash
                    = link_to("Delete",comment, method: :delete, class: 'btn btn-danger', data: { confirm: 'Are you sure?' })
         hr/
       p
        strong Add a comment
        - policy = CommentPolicy.new(current_user, page)
        - if policy.create?
          = form_for([page, Comment.new(page_id: page.id)]) do |f|
            p
              strong Commenter:
              = current_user.email
            p
              strong Comment
            br
            = f.cktext_area :body, :cols => 20,:ckeditor => {:uiColor => '#67b1d5', :height => 200}, required: true
            p
            = f.button :submit , class:"secondary small button"
        - else
          p
            .panel(class="callout")
              h6="You should sign in for have ability to add comments"

